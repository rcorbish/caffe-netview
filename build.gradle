
apply plugin: 'cpp'


model {
	repositories {
        libs(PrebuiltLibraries) {
            boost {
                headers.srcDir "3rd-party-lib/boost_1_55_0/boost"                
            }
            nodev8 {
            	headers.srcDir "/home/richard/.node-gyp/8.1.2/include/node" 
            }
            Caffe2_CPU { 
            	headers.srcDir "/home/richard/workspace/caffe2/include"
            	headers.srcDir "/home/richard/workspace/caffe2/.build_release/src" 
            }
            cuda { 
            	headers.srcDir "/usr/local/cuda/include" 
            }
		}
	}
	
    binaries {
        all {
            cppCompiler.define "CAFFE_VERSION=1.0.0-rc3"
            cppCompiler.define "NDEBUG"
            cppCompiler.define "CPU_ONLY"
            cppCompiler.define "USE_OPENCV"
            cppCompiler.define "USE_LMDB"
            //srcDir "/home/richard/workspace/caffe2/build/caffe2"

            if (toolChain in Gcc) {
                cppCompiler.args "-MMD", "-MP",  "-pthread", "-fPIC", "-O2", "-fmax-errors=5", "-Wno-sign-compare" 
                linker.args "-shared", "-Wl,-soname,libcaffenetview.so"
            }
        }
    }
    
    components {
		caffenetview(NativeLibrarySpec) {		
			binaries.withType(StaticLibraryBinarySpec) {
                buildable = false
            }	
   			sources {              
		      cpp.lib library: 'boost', linkage: 'api'
              cpp.lib library: 'nodev8', linkage: 'api'
              cpp.lib library: 'cuda', linkage: 'api'
              cpp.lib library: 'Caffe2_CPU', linkage: 'api'
    	   } 
    	}
    }
}


task gypconfig( type: Exec ) {
	inputs.file 'binding.gyp' 
	outputs.file 'build/config.gypi'
	
	description 'Creates node-gyp config before node-gyp build stage.'
	
	executable 'node-gyp'
    args 'configure'
}


task gypbuild( dependsOn: 'gypconfig', type: Exec) {
		
	inputs.file 'src/Caffe.cpp' 
	inputs.files gypconfig.inputs.files	
	outputs.file 'build/Release/caffe-netview.node' 

	description 'Builds the npm package'
	
	executable 'node-gyp'
    args 'build'
}


task protobufdescriptor( type: Exec ) {
	inputs.file '/home/richard/workspace/caffe2/caffe/proto/caffe.proto'
	outputs.file 'caffe-protocol.protodesc'

	description 'Compiles the caffe protobuf to a descriptor (used by node-proto package)'
	 
	executable 'protoc'
	def arglist = protobufdescriptor.inputs.files 
	arglist += '-o' 
	arglist += protobufdescriptor.outputs.files 
	arglist += '--proto_path'
	arglist += '/home/richard/workspace/caffe2/caffe/proto/'
    args arglist	
}

build.finalizedBy  gypbuild
build.finalizedBy  protobufdescriptor 
